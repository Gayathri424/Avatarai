ðŸ“Œ Git Commands Cheat Sheet
ðŸ”¹ Setup & Configuration

docker events --since 1h --filter 'event=destroy'

git config --global user.name "Your Name" â†’ Set username globally

git config --global user.email "your@email.com" â†’ Set email globally

git config --list â†’ Show all Git configurations

ðŸ”¹ Repository Initialization

git init â†’ Initialize a new Git repository

git clone <repo_url> â†’ Clone a remote repository locally

ðŸ”¹ Basic Snapshotting

git status â†’ Show the status of files (modified, staged, untracked)

git add <file> â†’ Stage a file for commit

git add . â†’ Stage all modified/untracked files

git reset <file> â†’ Unstage a staged file

git commit -m "message" â†’ Commit staged changes with a message

git commit -am "message" â†’ Stage & commit all tracked files in one step

git log â†’ View commit history

git log --oneline â†’ View commits in single-line format

ðŸ”¹ Branching & Merging

git branch â†’ List all branches

git branch <name> â†’ Create a new branch

git checkout <branch> â†’ Switch to another branch

git checkout -b <branch> â†’ Create & switch to a new branch

git merge <branch> â†’ Merge a branch into the current branch

git branch -d <branch> â†’ Delete a branch

git switch <branch> â†’ Switch to a branch (newer alternative to checkout)

git switch -c <branch> â†’ Create & switch to new branch

ðŸ”¹ Remote Repositories

git remote -v â†’ List remote connections

git remote add origin <url> â†’ Add a new remote repository

git remote remove origin â†’ Remove a remote repository

git fetch â†’ Fetch changes from remote but donâ€™t merge

git pull â†’ Fetch and merge changes from remote

git push origin <branch> â†’ Push local branch to remote

git push -u origin <branch> â†’ Push and set upstream tracking branch

ðŸ”¹ Undoing Changes

git restore <file> â†’ Discard changes in working directory

git restore --staged <file> â†’ Unstage file but keep changes

git reset --hard â†’ Reset staging area & working directory to last commit

git reset --soft HEAD~1 â†’ Undo last commit but keep changes staged

git revert <commit> â†’ Create new commit that undoes changes of given commit

ðŸ”¹ Stashing (Temporary Save)

git stash â†’ Stash (save) uncommitted changes

git stash list â†’ List all stashes

git stash apply â†’ Reapply last stashed changes

git stash pop â†’ Reapply last stash and delete it

git stash drop â†’ Delete a specific stash

ðŸ”¹ Tagging

git tag â†’ List all tags

git tag <name> â†’ Create a new tag

git tag -a <name> -m "message" â†’ Create annotated tag

git push origin <tag> â†’ Push a tag to remote

git push origin --tags â†’ Push all tags to remote

ðŸ”¹ Collaboration & Inspection

git diff â†’ Show unstaged changes

git diff --staged â†’ Show staged changes

git show <commit> â†’ Show details of a commit

git blame <file> â†’ Show who changed each line of a file

git shortlog â†’ Summarize commits by author

ðŸ”¹ Cleaning Up

git clean -n â†’ Show which files would be removed

git clean -f â†’ Remove untracked files

git gc â†’ Run garbage collection and optimize repository

ðŸ”¹ Advanced

git rebase <branch> â†’ Reapply commits on top of another branch

git cherry-pick <commit> â†’ Apply a specific commit from another branch

git bisect start â†’ Start binary search to find buggy commit

git bisect good <commit> / git bisect bad <commit> â†’ Mark commits during bisecting
ðŸ”¹ Advanced Branch & Checkout

git branch -a â†’ List all local + remote branches

git branch -r â†’ List remote branches only

git checkout -- <file> â†’ Discard changes in a file

git checkout <commit> â†’ Switch to a specific commit (detached HEAD)

git switch - â†’ Switch back to last branch

ðŸ”¹ Remote Management

git remote rename origin upstream â†’ Rename a remote

git remote set-url origin <new_url> â†’ Change remote repo URL

git push --delete origin <branch> â†’ Delete branch from remote

git pull --rebase â†’ Pull changes but rebase instead of merge

git fetch --all â†’ Fetch all remotes

ðŸ”¹ Log & History Exploration

git log --graph --oneline --all â†’ Pretty commit graph

git log -p â†’ Show patch/diff with commit history

git log --author="Name" â†’ Show commits by a specific author

git log --since="2 weeks ago" â†’ Show recent commits

git reflog â†’ Show all HEAD changes (even deleted commits!)

ðŸ”¹ Reset & Recovery

git reset HEAD~1 â†’ Undo last commit, keep changes unstaged

git reset --mixed â†’ Unstage files but keep changes

git reset --hard <commit> â†’ Reset everything to a given commit

git checkout <commit> -- <file> â†’ Restore a file from past commit

git reflog + git checkout â†’ Recover lost commits

ðŸ”¹ Stash (More Options)

git stash save "msg" â†’ Stash with a message

git stash apply stash@{2} â†’ Apply a specific stash

git stash branch <branch> â†’ Create a branch from stashed changes

ðŸ”¹ Tags (More Options)

git show <tag> â†’ Show tag details

git tag -d <tag> â†’ Delete a tag locally

git push origin :refs/tags/<tag> â†’ Delete tag on remote

ðŸ”¹ Collaboration

git fetch origin <branch> â†’ Fetch a specific branch

git merge --abort â†’ Abort merge conflicts

git mergetool â†’ Launch merge resolution tool

git pull --no-commit â†’ Pull changes but donâ€™t commit automatically

ðŸ”¹ Submodules

git submodule add <url> â†’ Add a submodule

git submodule init â†’ Initialize submodules

git submodule update â†’ Update submodules

git clone --recurse-submodules <url> â†’ Clone with submodules

ðŸ”¹ Patching & Export

git diff > patch.diff â†’ Create a patch file

git apply patch.diff â†’ Apply a patch file

git format-patch -1 <commit> â†’ Generate email-ready patch

ðŸ”¹ Cleanup & Maintenance

git prune â†’ Remove unreachable objects

git fsck â†’ Check repo for corruption/issues

git gc --aggressive â†’ Deep optimize repo

ðŸ”¹ Useful Shortcuts

git alias (via config) â†’ Create custom Git shortcuts

git help <command> â†’ Show help for a command

git rev-parse HEAD â†’ Get current commit hash
